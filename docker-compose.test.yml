services:
  app:
    build: 
      context: .
      dockerfile: apps/weather-app/Dockerfile
    command: npm run test:int
    ports:
      - 3000:3000
    env_file:
      - ./apps/weather-app/.env.test
    depends_on:
      test_db:
        condition: service_healthy
      test_redis:
        condition: service_healthy
      test_rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=test
    networks:
      - test_network

  mail:
    build: 
      context: .
      dockerfile: apps/mail/Dockerfile
    ports:
      - 4000:4000
    env_file:
      - ./apps/mail/.env.test
    depends_on:
      test_rabbitmq:
        condition: service_healthy
    networks:
      - test_network

  test_db:
    image: postgres:15
    restart: always
    env_file:
      - ./apps/weather-app/.env.test
    ports:
      - ${DB_PORT}:5432
    volumes:
      - pg_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d weather_app_test"]
      interval: 5s
      retries: 5
      timeout: 5s
    networks:
      - test_network

  test_redis:
    image: redis:alpine
    ports:
      - ${REDIS_PORT}:6379
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASS}
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - test_network

  test_rabbitmq:
    image: rabbitmq:3-management
    ports:
      - ${RMQ_PORT}:5672
      - ${RMQ_MGMT_PORT}:15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RMQ_PASS}
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - test_network

volumes:
  pg_test_data:
  redis_test_data:

networks:
  test_network: